// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimplCommerce.Module.Core.Data;

namespace SimplCommerce.WebHost.Migrations
{
    [DbContext(typeof(SimplDbContext))]
    [Migration("20190212090153_SimplCommerce_v1_0_0")]
    partial class SimplCommerce_v1_0_0
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Core_RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Core_UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Core_UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("Core_UserToken");
                });

            modelBuilder.Entity("SimplCommerce.Infrastructure.Localization.Culture", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Localization_Culture");

                    b.HasData(
                        new
                        {
                            Id = "en-US",
                            Name = "English (US)"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Infrastructure.Localization.Resource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CultureId")
                        .IsRequired();

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CultureId");

                    b.ToTable("Localization_Resource");
                });

            modelBuilder.Entity("SimplCommerce.Module.ActivityLog.Models.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityTypeId");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("EntityId");

                    b.Property<string>("EntityTypeId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityTypeId");

                    b.ToTable("ActivityLog_Activity");
                });

            modelBuilder.Entity("SimplCommerce.Module.ActivityLog.Models.ActivityType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("ActivityLog_ActivityType");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "EntityView"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Catalog_Brand");
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IncludeInMenu");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(450);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<long?>("ParentId");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<long?>("ThumbnailImageId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ThumbnailImageId");

                    b.ToTable("Catalog_Category");
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BrandId");

                    b.Property<long>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Gtin")
                        .HasMaxLength(450);

                    b.Property<bool>("HasOptions");

                    b.Property<bool>("IsAllowToOrder");

                    b.Property<bool>("IsCallForPricing");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFeatured");

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsVisibleIndividually");

                    b.Property<long>("LatestUpdatedById");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(450);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(450);

                    b.Property<decimal?>("OldPrice");

                    b.Property<decimal>("Price");

                    b.Property<DateTimeOffset?>("PublishedOn");

                    b.Property<double?>("RatingAverage");

                    b.Property<int>("ReviewsCount");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(450);

                    b.Property<string>("Sku")
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<decimal?>("SpecialPrice");

                    b.Property<DateTimeOffset?>("SpecialPriceEnd");

                    b.Property<DateTimeOffset?>("SpecialPriceStart");

                    b.Property<string>("Specification");

                    b.Property<int>("StockQuantity");

                    b.Property<bool>("StockTrackingIsEnabled");

                    b.Property<long?>("TaxClassId");

                    b.Property<long?>("ThumbnailImageId");

                    b.Property<long?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LatestUpdatedById");

                    b.HasIndex("TaxClassId");

                    b.HasIndex("ThumbnailImageId");

                    b.ToTable("Catalog_Product");
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductAttribute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("GroupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Catalog_ProductAttribute");
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductAttributeGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Catalog_ProductAttributeGroup");
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductAttributeValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AttributeId");

                    b.Property<long>("ProductId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductAttributeValue");
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsFeaturedProduct");

                    b.Property<long>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductCategory");
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LinkType");

                    b.Property<long>("LinkedProductId");

                    b.Property<long>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("LinkedProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductLink");
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayOrder");

                    b.Property<long>("MediaId");

                    b.Property<long>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductMedia");
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Catalog_ProductOption");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Color"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Size"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductOptionCombination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("OptionId");

                    b.Property<long>("ProductId");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductOptionCombination");
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductOptionValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayType")
                        .HasMaxLength(450);

                    b.Property<long>("OptionId");

                    b.Property<long>("ProductId");

                    b.Property<int>("SortIndex");

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductOptionValue");
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductPriceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<decimal?>("OldPrice");

                    b.Property<decimal?>("Price");

                    b.Property<long?>("ProductId");

                    b.Property<decimal?>("SpecialPrice");

                    b.Property<DateTimeOffset?>("SpecialPriceEnd");

                    b.Property<DateTimeOffset?>("SpecialPriceStart");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.ToTable("Catalog_ProductPriceHistory");
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Catalog_ProductTemplate");
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductTemplateProductAttribute", b =>
                {
                    b.Property<long>("ProductTemplateId");

                    b.Property<long>("ProductAttributeId");

                    b.HasKey("ProductTemplateId", "ProductAttributeId");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("Catalog_ProductTemplateProductAttribute");
                });

            modelBuilder.Entity("SimplCommerce.Module.Cms.Models.Menu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsPublished");

                    b.Property<bool>("IsSystem");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Cms_Menu");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsPublished = true,
                            IsSystem = true,
                            Name = "Customer Services"
                        },
                        new
                        {
                            Id = 2L,
                            IsPublished = true,
                            IsSystem = true,
                            Name = "Information"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Cms.Models.MenuItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomLink")
                        .HasMaxLength(450);

                    b.Property<int>("DisplayOrder");

                    b.Property<long?>("EntityId");

                    b.Property<long>("MenuId");

                    b.Property<string>("Name")
                        .HasMaxLength(450);

                    b.Property<long?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("MenuId");

                    b.HasIndex("ParentId");

                    b.ToTable("Cms_MenuItem");
                });

            modelBuilder.Entity("SimplCommerce.Module.Cms.Models.Page", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<long>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<long>("LatestUpdatedById");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(450);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset?>("PublishedOn");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LatestUpdatedById");

                    b.ToTable("Cms_Page");
                });

            modelBuilder.Entity("SimplCommerce.Module.Comments.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText");

                    b.Property<string>("CommenterName")
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("EntityId");

                    b.Property<string>("EntityTypeId")
                        .HasMaxLength(450);

                    b.Property<long?>("ParentId");

                    b.Property<int>("Status");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments_Comment");
                });

            modelBuilder.Entity("SimplCommerce.Module.Contacts.Models.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(450);

                    b.Property<long>("ContactAreaId");

                    b.Property<string>("Content");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(450);

                    b.Property<string>("FullName")
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("ContactAreaId");

                    b.ToTable("Contacts_Contact");
                });

            modelBuilder.Entity("SimplCommerce.Module.Contacts.Models.ContactArea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Contacts_ContactArea");
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(450);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(450);

                    b.Property<string>("City")
                        .HasMaxLength(450);

                    b.Property<string>("ContactName")
                        .HasMaxLength(450);

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<long?>("DistrictId");

                    b.Property<string>("Phone")
                        .HasMaxLength(450);

                    b.Property<long>("StateOrProvinceId");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateOrProvinceId");

                    b.ToTable("Core_Address");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressLine1 = "364 Cong Hoa",
                            ContactName = "Thien Nguyen",
                            CountryId = "VN",
                            StateOrProvinceId = 1L
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.AppSetting", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsVisibleInCommonSettingPage");

                    b.Property<string>("Module")
                        .HasMaxLength(450);

                    b.Property<string>("Value")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Core_AppSetting");

                    b.HasData(
                        new
                        {
                            Id = "Catalog.ProductPageSize",
                            IsVisibleInCommonSettingPage = true,
                            Module = "Catalog",
                            Value = "10"
                        },
                        new
                        {
                            Id = "Catalog.IsProductPriceIncludeTax",
                            IsVisibleInCommonSettingPage = true,
                            Module = "Catalog",
                            Value = "true"
                        },
                        new
                        {
                            Id = "Catalog.IsCommentsRequireApproval",
                            IsVisibleInCommonSettingPage = true,
                            Module = "Catalog",
                            Value = "true"
                        },
                        new
                        {
                            Id = "GoogleAppKey",
                            IsVisibleInCommonSettingPage = false,
                            Module = "Contact",
                            Value = ""
                        },
                        new
                        {
                            Id = "Global.AssetVersion",
                            IsVisibleInCommonSettingPage = true,
                            Module = "Core",
                            Value = "1.0"
                        },
                        new
                        {
                            Id = "Theme",
                            IsVisibleInCommonSettingPage = false,
                            Module = "Core",
                            Value = "Generic"
                        },
                        new
                        {
                            Id = "SmtpServer",
                            IsVisibleInCommonSettingPage = false,
                            Module = "EmailSenderSmpt",
                            Value = "smtp.gmail.com"
                        },
                        new
                        {
                            Id = "SmtpPort",
                            IsVisibleInCommonSettingPage = false,
                            Module = "EmailSenderSmpt",
                            Value = "587"
                        },
                        new
                        {
                            Id = "SmtpUsername",
                            IsVisibleInCommonSettingPage = false,
                            Module = "EmailSenderSmpt",
                            Value = ""
                        },
                        new
                        {
                            Id = "SmtpPassword",
                            IsVisibleInCommonSettingPage = false,
                            Module = "EmailSenderSmpt",
                            Value = ""
                        },
                        new
                        {
                            Id = "News.PageSize",
                            IsVisibleInCommonSettingPage = true,
                            Module = "News",
                            Value = "10"
                        },
                        new
                        {
                            Id = "Tax.DefaultTaxClassId",
                            IsVisibleInCommonSettingPage = true,
                            Module = "Tax",
                            Value = "1"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.Country", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code3")
                        .HasMaxLength(450);

                    b.Property<bool>("IsBillingEnabled");

                    b.Property<bool>("IsCityEnabled");

                    b.Property<bool>("IsDistrictEnabled");

                    b.Property<bool>("IsShippingEnabled");

                    b.Property<bool>("IsZipCodeEnabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Core_Country");

                    b.HasData(
                        new
                        {
                            Id = "VN",
                            Code3 = "VNM",
                            IsBillingEnabled = true,
                            IsCityEnabled = false,
                            IsDistrictEnabled = true,
                            IsShippingEnabled = true,
                            IsZipCodeEnabled = false,
                            Name = "Việt Nam"
                        },
                        new
                        {
                            Id = "US",
                            Code3 = "USA",
                            IsBillingEnabled = true,
                            IsCityEnabled = true,
                            IsDistrictEnabled = false,
                            IsShippingEnabled = true,
                            IsZipCodeEnabled = true,
                            Name = "United States"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.CustomerGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Core_CustomerGroup");
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.CustomerGroupUser", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("CustomerGroupId");

                    b.HasKey("UserId", "CustomerGroupId");

                    b.HasIndex("CustomerGroupId");

                    b.ToTable("Core_CustomerGroupUser");
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<long>("StateOrProvinceId");

                    b.Property<string>("Type")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("StateOrProvinceId");

                    b.ToTable("Core_District");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Quận 1",
                            StateOrProvinceId = 1L,
                            Type = "Quận"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Quận 2",
                            StateOrProvinceId = 1L,
                            Type = "Quận"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityId");

                    b.Property<string>("EntityTypeId")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("Core_Entity");
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.EntityType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AreaName")
                        .HasMaxLength(450);

                    b.Property<bool>("IsMenuable");

                    b.Property<string>("RoutingAction")
                        .HasMaxLength(450);

                    b.Property<string>("RoutingController")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Core_EntityType");

                    b.HasData(
                        new
                        {
                            Id = "Category",
                            AreaName = "Catalog",
                            IsMenuable = true,
                            RoutingAction = "CategoryDetail",
                            RoutingController = "Category"
                        },
                        new
                        {
                            Id = "Brand",
                            AreaName = "Catalog",
                            IsMenuable = true,
                            RoutingAction = "BrandDetail",
                            RoutingController = "Brand"
                        },
                        new
                        {
                            Id = "Product",
                            AreaName = "Catalog",
                            IsMenuable = false,
                            RoutingAction = "ProductDetail",
                            RoutingController = "Product"
                        },
                        new
                        {
                            Id = "Page",
                            AreaName = "Cms",
                            IsMenuable = true,
                            RoutingAction = "PageDetail",
                            RoutingController = "Page"
                        },
                        new
                        {
                            Id = "Vendor",
                            AreaName = "Core",
                            IsMenuable = false,
                            RoutingAction = "VendorDetail",
                            RoutingController = "Vendor"
                        },
                        new
                        {
                            Id = "NewsCategory",
                            AreaName = "News",
                            IsMenuable = true,
                            RoutingAction = "NewsCategoryDetail",
                            RoutingController = "NewsCategory"
                        },
                        new
                        {
                            Id = "NewsItem",
                            AreaName = "News",
                            IsMenuable = false,
                            RoutingAction = "NewsItemDetail",
                            RoutingController = "NewsItem"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.Media", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasMaxLength(450);

                    b.Property<string>("FileName")
                        .HasMaxLength(450);

                    b.Property<int>("FileSize");

                    b.Property<int>("MediaType");

                    b.HasKey("Id");

                    b.ToTable("Core_Media");
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Core_Role");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ConcurrencyStamp = "4776a1b2-dbe4-4056-82ec-8bed211d1454",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2L,
                            ConcurrencyStamp = "00d172be-03a0-4856-8b12-26d63fcf4374",
                            Name = "customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = 3L,
                            ConcurrencyStamp = "d4754388-8355-4018-b728-218018836817",
                            Name = "guest",
                            NormalizedName = "GUEST"
                        },
                        new
                        {
                            Id = 4L,
                            ConcurrencyStamp = "71f10604-8c4d-4a7d-ac4a-ffefb11cefeb",
                            Name = "vendor",
                            NormalizedName = "VENDOR"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.StateOrProvince", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(450);

                    b.Property<string>("CountryId")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Type")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Core_StateOrProvince");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CountryId = "VN",
                            Name = "Hồ Chí Minh",
                            Type = "Thành Phố"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "WA",
                            CountryId = "US",
                            Name = "Washington"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Culture")
                        .HasMaxLength(450);

                    b.Property<long?>("DefaultBillingAddressId");

                    b.Property<long?>("DefaultShippingAddressId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("ExtensionData");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RefreshTokenHash")
                        .HasMaxLength(450);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<Guid>("UserGuid");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<long?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("DefaultBillingAddressId");

                    b.HasIndex("DefaultShippingAddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("VendorId");

                    b.ToTable("Core_User");

                    b.HasData(
                        new
                        {
                            Id = 2L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "101cd6ae-a8ef-4a37-97fd-04ac2dd630e4",
                            CreatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 189, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "system@simplcommerce.com",
                            EmailConfirmed = false,
                            FullName = "System User",
                            IsDeleted = true,
                            LatestUpdatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 189, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "SYSTEM@SIMPLCOMMERCE.COM",
                            NormalizedUserName = "SYSTEM@SIMPLCOMMERCE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAEqSCV8Bpg69irmeg8N86U503jGEAYf75fBuzvL00/mr/FGEsiUqfR0rWBbBUwqtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9565acb-cee6-425f-9833-419a793f5fba",
                            TwoFactorEnabled = false,
                            UserGuid = new Guid("5f72f83b-7436-4221-869c-1b69b2e23aae"),
                            UserName = "system@simplcommerce.com"
                        },
                        new
                        {
                            Id = 10L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c83afcbc-312c-4589-bad7-8686bd4754c0",
                            CreatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 190, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "admin@simplcommerce.com",
                            EmailConfirmed = false,
                            FullName = "Shop Admin",
                            IsDeleted = false,
                            LatestUpdatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 190, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SIMPLCOMMERCE.COM",
                            NormalizedUserName = "ADMIN@SIMPLCOMMERCE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAEqSCV8Bpg69irmeg8N86U503jGEAYf75fBuzvL00/mr/FGEsiUqfR0rWBbBUwqtw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d6847450-47f0-4c7a-9fed-0c66234bf61f",
                            TwoFactorEnabled = false,
                            UserGuid = new Guid("ed8210c3-24b0-4823-a744-80078cf12eb4"),
                            UserName = "admin@simplcommerce.com"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.UserAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId");

                    b.Property<int>("AddressType");

                    b.Property<DateTimeOffset?>("LastUsedOn");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Core_UserAddress");
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.UserRole", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Core_UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 10L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.Vendor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Core_Vendor");
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.Widget", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateUrl")
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("EditUrl")
                        .HasMaxLength(450);

                    b.Property<bool>("IsPublished");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ViewComponentName")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Core_Widget");

                    b.HasData(
                        new
                        {
                            Id = "CategoryWidget",
                            CreateUrl = "widget-category-create",
                            CreatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 160, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            EditUrl = "widget-category-edit",
                            IsPublished = false,
                            Name = "Category Widget",
                            ViewComponentName = "CategoryWidget"
                        },
                        new
                        {
                            Id = "ProductWidget",
                            CreateUrl = "widget-product-create",
                            CreatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 163, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            EditUrl = "widget-product-edit",
                            IsPublished = false,
                            Name = "Product Widget",
                            ViewComponentName = "ProductWidget"
                        },
                        new
                        {
                            Id = "SimpleProductWidget",
                            CreateUrl = "widget-simple-product-create",
                            CreatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 163, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            EditUrl = "widget-simple-product-edit",
                            IsPublished = false,
                            Name = "Simple Product Widget",
                            ViewComponentName = "SimpleProductWidget"
                        },
                        new
                        {
                            Id = "HtmlWidget",
                            CreateUrl = "widget-html-create",
                            CreatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 164, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            EditUrl = "widget-html-edit",
                            IsPublished = false,
                            Name = "Html Widget",
                            ViewComponentName = "HtmlWidget"
                        },
                        new
                        {
                            Id = "CarouselWidget",
                            CreateUrl = "widget-carousel-create",
                            CreatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 164, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            EditUrl = "widget-carousel-edit",
                            IsPublished = false,
                            Name = "Carousel Widget",
                            ViewComponentName = "CarouselWidget"
                        },
                        new
                        {
                            Id = "SpaceBarWidget",
                            CreateUrl = "widget-spacebar-create",
                            CreatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 164, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            EditUrl = "widget-spacebar-edit",
                            IsPublished = false,
                            Name = "SpaceBar Widget",
                            ViewComponentName = "SpaceBarWidget"
                        },
                        new
                        {
                            Id = "RecentlyViewedWidget",
                            CreateUrl = "widget-recently-viewed-create",
                            CreatedOn = new DateTimeOffset(new DateTime(2018, 5, 29, 4, 33, 39, 164, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            EditUrl = "widget-recently-viewed-edit",
                            IsPublished = false,
                            Name = "Recently Viewed Widget",
                            ViewComponentName = "RecentlyViewedWidget"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.WidgetInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Data");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("HtmlData");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset?>("PublishEnd");

                    b.Property<DateTimeOffset?>("PublishStart");

                    b.Property<string>("WidgetId")
                        .HasMaxLength(450);

                    b.Property<long>("WidgetZoneId");

                    b.HasKey("Id");

                    b.HasIndex("WidgetId");

                    b.HasIndex("WidgetZoneId");

                    b.ToTable("Core_WidgetInstance");
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.WidgetZone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Core_WidgetZone");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Home Featured"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Home Main Content"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Home After Main Content"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Inventory.Models.Stock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<int>("ReservedQuantity");

                    b.Property<long>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventory_Stock");
                });

            modelBuilder.Entity("SimplCommerce.Module.Inventory.Models.StockHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AdjustedQuantity");

                    b.Property<long>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Note")
                        .HasMaxLength(1000);

                    b.Property<long>("ProductId");

                    b.Property<long>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventory_StockHistory");
                });

            modelBuilder.Entity("SimplCommerce.Module.Inventory.Models.Warehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<long?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("VendorId");

                    b.ToTable("Inventory_Warehouse");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressId = 1L,
                            Name = "Default warehouse"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.News.Models.NewsCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(450);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("News_NewsCategory");
                });

            modelBuilder.Entity("SimplCommerce.Module.News.Models.NewsItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("FullContent");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsPublished");

                    b.Property<long>("LatestUpdatedById");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<string>("MetaDescription");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(450);

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset?>("PublishedOn");

                    b.Property<string>("ShortContent")
                        .HasMaxLength(450);

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<long?>("ThumbnailImageId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LatestUpdatedById");

                    b.HasIndex("ThumbnailImageId");

                    b.ToTable("News_NewsItem");
                });

            modelBuilder.Entity("SimplCommerce.Module.News.Models.NewsItemCategory", b =>
                {
                    b.Property<long>("CategoryId");

                    b.Property<long>("NewsItemId");

                    b.HasKey("CategoryId", "NewsItemId");

                    b.HasIndex("NewsItemId");

                    b.ToTable("News_NewsItemCategory");
                });

            modelBuilder.Entity("SimplCommerce.Module.Orders.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BillingAddressId");

                    b.Property<string>("CouponCode")
                        .HasMaxLength(450);

                    b.Property<string>("CouponRuleName")
                        .HasMaxLength(450);

                    b.Property<long>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("CustomerId");

                    b.Property<decimal>("DiscountAmount");

                    b.Property<bool>("IsMasterOrder");

                    b.Property<long>("LatestUpdatedById");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<string>("OrderNote")
                        .HasMaxLength(1000);

                    b.Property<int>("OrderStatus");

                    b.Property<decimal>("OrderTotal");

                    b.Property<long?>("ParentId");

                    b.Property<decimal>("PaymentFeeAmount");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(450);

                    b.Property<long>("ShippingAddressId");

                    b.Property<decimal>("ShippingFeeAmount");

                    b.Property<string>("ShippingMethod")
                        .HasMaxLength(450);

                    b.Property<decimal>("SubTotal");

                    b.Property<decimal>("SubTotalWithDiscount");

                    b.Property<decimal>("TaxAmount");

                    b.Property<long?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LatestUpdatedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Orders_Order");
                });

            modelBuilder.Entity("SimplCommerce.Module.Orders.Models.OrderAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(450);

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(450);

                    b.Property<string>("City")
                        .HasMaxLength(450);

                    b.Property<string>("ContactName")
                        .HasMaxLength(450);

                    b.Property<string>("CountryId")
                        .HasMaxLength(450);

                    b.Property<long?>("DistrictId");

                    b.Property<string>("Phone")
                        .HasMaxLength(450);

                    b.Property<long>("StateOrProvinceId");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateOrProvinceId");

                    b.ToTable("Orders_OrderAddress");
                });

            modelBuilder.Entity("SimplCommerce.Module.Orders.Models.OrderHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<int>("NewStatus");

                    b.Property<string>("Note")
                        .HasMaxLength(1000);

                    b.Property<int?>("OldStatus");

                    b.Property<long>("OrderId");

                    b.Property<string>("OrderSnapshot");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.ToTable("Orders_OrderHistory");
                });

            modelBuilder.Entity("SimplCommerce.Module.Orders.Models.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("DiscountAmount");

                    b.Property<long?>("OrderId");

                    b.Property<long>("ProductId");

                    b.Property<decimal>("ProductPrice");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("TaxAmount");

                    b.Property<decimal>("TaxPercent");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders_OrderItem");
                });

            modelBuilder.Entity("SimplCommerce.Module.Payments.Models.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("FailureMessage");

                    b.Property<string>("GatewayTransactionId")
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<long>("OrderId");

                    b.Property<decimal>("PaymentFee");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(450);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments_Payment");
                });

            modelBuilder.Entity("SimplCommerce.Module.Payments.Models.PaymentProvider", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalSettings");

                    b.Property<string>("ConfigureUrl")
                        .HasMaxLength(450);

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("LandingViewComponentName")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Payments_PaymentProvider");

                    b.HasData(
                        new
                        {
                            Id = "Braintree",
                            AdditionalSettings = "{\"PublicKey\": \"6j4d7qspt5n48kx4\", \"PrivateKey\" : \"bd1c26e53a6d811243fcc3eb268113e1\", \"MerchantId\" : \"ncsh7wwqvzs3cx9q\", \"IsProduction\" : \"false\"}",
                            ConfigureUrl = "payments-braintree-config",
                            IsEnabled = true,
                            LandingViewComponentName = "BraintreeLanding",
                            Name = "Braintree"
                        },
                        new
                        {
                            Id = "CoD",
                            ConfigureUrl = "payments-cod-config",
                            IsEnabled = true,
                            LandingViewComponentName = "CoDLanding",
                            Name = "Cash On Delivery"
                        },
                        new
                        {
                            Id = "PaypalExpress",
                            AdditionalSettings = "{ \"IsSandbox\":true, \"ClientId\":\"\", \"ClientSecret\":\"\" }",
                            ConfigureUrl = "payments-paypalExpress-config",
                            IsEnabled = true,
                            LandingViewComponentName = "PaypalExpressLanding",
                            Name = "Paypal Express"
                        },
                        new
                        {
                            Id = "Stripe",
                            AdditionalSettings = "{\"PublicKey\": \"pk_test_6pRNASCoBOKtIshFeQd4XMUh\", \"PrivateKey\" : \"sk_test_BQokikJOvBiI2HlWgH4olfQ2\"}",
                            ConfigureUrl = "payments-stripe-config",
                            IsEnabled = true,
                            LandingViewComponentName = "StripeLanding",
                            Name = "Stripe"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.CartRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<decimal>("DiscountAmount");

                    b.Property<int?>("DiscountStep");

                    b.Property<DateTimeOffset?>("EndOn");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCouponRequired");

                    b.Property<decimal?>("MaxDiscountAmount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("RuleToApply")
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset?>("StartOn");

                    b.Property<int?>("UsageLimitPerCoupon");

                    b.Property<int?>("UsageLimitPerCustomer");

                    b.HasKey("Id");

                    b.ToTable("Pricing_CartRule");
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.CartRuleCategory", b =>
                {
                    b.Property<long>("CartRuleId");

                    b.Property<long>("CategoryId");

                    b.HasKey("CartRuleId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Pricing_CartRuleCategory");
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.CartRuleCustomerGroup", b =>
                {
                    b.Property<long>("CartRuleId");

                    b.Property<long>("CustomerGroupId");

                    b.HasKey("CartRuleId", "CustomerGroupId");

                    b.HasIndex("CustomerGroupId");

                    b.ToTable("Pricing_CartRuleCustomerGroup");
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.CartRuleProduct", b =>
                {
                    b.Property<long>("CartRuleId");

                    b.Property<long>("ProductId");

                    b.HasKey("CartRuleId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Pricing_CartRuleProduct");
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.CartRuleUsage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CartRuleId");

                    b.Property<long?>("CouponId");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("OrderId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CartRuleId");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("Pricing_CartRuleUsage");
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.CatalogRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<decimal>("DiscountAmount");

                    b.Property<DateTimeOffset?>("EndOn");

                    b.Property<bool>("IsActive");

                    b.Property<decimal?>("MaxDiscountAmount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("RuleToApply")
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset?>("StartOn");

                    b.HasKey("Id");

                    b.ToTable("Pricing_CatalogRule");
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.CatalogRuleCustomerGroup", b =>
                {
                    b.Property<long>("CatalogRuleId");

                    b.Property<long>("CustomerGroupId");

                    b.HasKey("CatalogRuleId", "CustomerGroupId");

                    b.HasIndex("CustomerGroupId");

                    b.ToTable("Pricing_CatalogRuleCustomerGroup");
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CartRuleId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.HasKey("Id");

                    b.HasIndex("CartRuleId");

                    b.ToTable("Pricing_Coupon");
                });

            modelBuilder.Entity("SimplCommerce.Module.ProductComparison.Models.ComparingProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("ProductId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductComparison_ComparingProduct");
                });

            modelBuilder.Entity("SimplCommerce.Module.ProductRecentlyViewed.Models.RecentlyViewedProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("LatestViewedOn");

                    b.Property<long>("ProductId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("ProductRecentlyViewed_RecentlyViewedProduct");
                });

            modelBuilder.Entity("SimplCommerce.Module.Reviews.Models.Reply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("ReplierName")
                        .HasMaxLength(450);

                    b.Property<long>("ReviewId");

                    b.Property<int>("Status");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews_Reply");
                });

            modelBuilder.Entity("SimplCommerce.Module.Reviews.Models.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("EntityId");

                    b.Property<string>("EntityTypeId")
                        .HasMaxLength(450);

                    b.Property<int>("Rating");

                    b.Property<string>("ReviewerName")
                        .HasMaxLength(450);

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .HasMaxLength(450);

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews_Review");
                });

            modelBuilder.Entity("SimplCommerce.Module.Search.Models.Query", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("QueryText")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("ResultsCount");

                    b.HasKey("Id");

                    b.ToTable("Search_Query");
                });

            modelBuilder.Entity("SimplCommerce.Module.Shipments.Models.Shipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<long>("OrderId");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(450);

                    b.Property<long?>("VendorId");

                    b.Property<long>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrderId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Shipments_Shipment");
                });

            modelBuilder.Entity("SimplCommerce.Module.Shipments.Models.ShipmentItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("OrderItemId");

                    b.Property<long>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<long>("ShipmentId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShipmentId");

                    b.ToTable("Shipments_ShipmentItem");
                });

            modelBuilder.Entity("SimplCommerce.Module.Shipping.Models.ShippingProvider", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalSettings");

                    b.Property<string>("ConfigureUrl")
                        .HasMaxLength(450);

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("OnlyCountryIdsString")
                        .HasMaxLength(1000);

                    b.Property<string>("OnlyStateOrProvinceIdsString")
                        .HasMaxLength(1000);

                    b.Property<string>("ShippingPriceServiceTypeName")
                        .HasMaxLength(450);

                    b.Property<bool>("ToAllShippingEnabledCountries");

                    b.Property<bool>("ToAllShippingEnabledStatesOrProvinces");

                    b.HasKey("Id");

                    b.ToTable("Shipping_ShippingProvider");

                    b.HasData(
                        new
                        {
                            Id = "FreeShip",
                            AdditionalSettings = "{MinimumOrderAmount : 1}",
                            ConfigureUrl = "",
                            IsEnabled = true,
                            Name = "Free Ship",
                            ShippingPriceServiceTypeName = "SimplCommerce.Module.ShippingFree.Services.FreeShippingServiceProvider,SimplCommerce.Module.ShippingFree",
                            ToAllShippingEnabledCountries = true,
                            ToAllShippingEnabledStatesOrProvinces = true
                        },
                        new
                        {
                            Id = "TableRate",
                            ConfigureUrl = "shipping-table-rate-config",
                            IsEnabled = true,
                            Name = "Table Rate",
                            ShippingPriceServiceTypeName = "SimplCommerce.Module.ShippingTableRate.Services.TableRateShippingServiceProvider,SimplCommerce.Module.ShippingTableRate",
                            ToAllShippingEnabledCountries = true,
                            ToAllShippingEnabledStatesOrProvinces = true
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.ShippingTableRate.Models.PriceAndDestination", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryId")
                        .HasMaxLength(450);

                    b.Property<long?>("DistrictId");

                    b.Property<decimal>("MinOrderSubtotal");

                    b.Property<string>("Note");

                    b.Property<decimal>("ShippingPrice");

                    b.Property<long?>("StateOrProvinceId");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateOrProvinceId");

                    b.ToTable("ShippingTableRate_PriceAndDestination");
                });

            modelBuilder.Entity("SimplCommerce.Module.ShoppingCart.Models.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CouponCode")
                        .HasMaxLength(450);

                    b.Property<string>("CouponRuleName")
                        .HasMaxLength(450);

                    b.Property<long>("CreatedById");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("CustomerId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsProductPriceIncludeTax");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<string>("OrderNote")
                        .HasMaxLength(1000);

                    b.Property<decimal?>("ShippingAmount");

                    b.Property<string>("ShippingData");

                    b.Property<string>("ShippingMethod")
                        .HasMaxLength(450);

                    b.Property<decimal?>("TaxAmount");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.ToTable("ShoppingCart_Cart");
                });

            modelBuilder.Entity("SimplCommerce.Module.ShoppingCart.Models.CartItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CartId");

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<long>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCart_CartItem");
                });

            modelBuilder.Entity("SimplCommerce.Module.Tax.Models.TaxClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.ToTable("Tax_TaxClass");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Standard VAT"
                        });
                });

            modelBuilder.Entity("SimplCommerce.Module.Tax.Models.TaxRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryId")
                        .HasMaxLength(450);

                    b.Property<decimal>("Rate");

                    b.Property<long?>("StateOrProvinceId");

                    b.Property<long>("TaxClassId");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateOrProvinceId");

                    b.HasIndex("TaxClassId");

                    b.ToTable("Tax_TaxRate");
                });

            modelBuilder.Entity("SimplCommerce.Module.WishList.Models.WishList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<string>("SharingCode")
                        .HasMaxLength(450);

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WishList_WishList");
                });

            modelBuilder.Entity("SimplCommerce.Module.WishList.Models.WishListItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<DateTimeOffset>("LatestUpdatedOn");

                    b.Property<long>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<long>("WishListId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WishListId");

                    b.ToTable("WishList_WishListItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimplCommerce.Infrastructure.Localization.Resource", b =>
                {
                    b.HasOne("SimplCommerce.Infrastructure.Localization.Culture", "Culture")
                        .WithMany("Resources")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimplCommerce.Module.ActivityLog.Models.Activity", b =>
                {
                    b.HasOne("SimplCommerce.Module.ActivityLog.Models.ActivityType", "ActivityType")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.Category", b =>
                {
                    b.HasOne("SimplCommerce.Module.Catalog.Models.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.Media", "ThumbnailImage")
                        .WithMany()
                        .HasForeignKey("ThumbnailImageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.Product", b =>
                {
                    b.HasOne("SimplCommerce.Module.Catalog.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "LatestUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LatestUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Tax.Models.TaxClass", "TaxClass")
                        .WithMany()
                        .HasForeignKey("TaxClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.Media", "ThumbnailImage")
                        .WithMany()
                        .HasForeignKey("ThumbnailImageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductAttribute", b =>
                {
                    b.HasOne("SimplCommerce.Module.Catalog.Models.ProductAttributeGroup", "Group")
                        .WithMany("Attributes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductAttributeValue", b =>
                {
                    b.HasOne("SimplCommerce.Module.Catalog.Models.ProductAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductCategory", b =>
                {
                    b.HasOne("SimplCommerce.Module.Catalog.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductLink", b =>
                {
                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "LinkedProduct")
                        .WithMany("LinkedProductLinks")
                        .HasForeignKey("LinkedProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany("ProductLinks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductMedia", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.Media", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany("Medias")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductOptionCombination", b =>
                {
                    b.HasOne("SimplCommerce.Module.Catalog.Models.ProductOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany("OptionCombinations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductOptionValue", b =>
                {
                    b.HasOne("SimplCommerce.Module.Catalog.Models.ProductOption", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany("OptionValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductPriceHistory", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany("PriceHistories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Catalog.Models.ProductTemplateProductAttribute", b =>
                {
                    b.HasOne("SimplCommerce.Module.Catalog.Models.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductTemplates")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimplCommerce.Module.Catalog.Models.ProductTemplate", "ProductTemplate")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimplCommerce.Module.Cms.Models.MenuItem", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Cms.Models.Menu", "Menu")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Cms.Models.MenuItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Cms.Models.Page", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "LatestUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LatestUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Comments.Models.Comment", b =>
                {
                    b.HasOne("SimplCommerce.Module.Comments.Models.Comment", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Contacts.Models.Contact", b =>
                {
                    b.HasOne("SimplCommerce.Module.Contacts.Models.ContactArea", "ContactArea")
                        .WithMany()
                        .HasForeignKey("ContactAreaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.Address", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.StateOrProvince", "StateOrProvince")
                        .WithMany()
                        .HasForeignKey("StateOrProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.CustomerGroupUser", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.CustomerGroup", "CustomerGroup")
                        .WithMany("Users")
                        .HasForeignKey("CustomerGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "User")
                        .WithMany("CustomerGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.District", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.StateOrProvince", "StateOrProvince")
                        .WithMany()
                        .HasForeignKey("StateOrProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.Entity", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.StateOrProvince", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.Country", "Country")
                        .WithMany("StatesOrProvinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.User", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.UserAddress", "DefaultBillingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultBillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.UserAddress", "DefaultShippingAddress")
                        .WithMany()
                        .HasForeignKey("DefaultShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.Vendor")
                        .WithMany("Users")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.UserAddress", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.Address", "Address")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.UserRole", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Core.Models.WidgetInstance", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.Widget", "Widget")
                        .WithMany()
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.WidgetZone", "WidgetZone")
                        .WithMany()
                        .HasForeignKey("WidgetZoneId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Inventory.Models.Stock", b =>
                {
                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Inventory.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Inventory.Models.StockHistory", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Inventory.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Inventory.Models.Warehouse", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.News.Models.NewsItem", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "LatestUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LatestUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.Media", "ThumbnailImage")
                        .WithMany()
                        .HasForeignKey("ThumbnailImageId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.News.Models.NewsItemCategory", b =>
                {
                    b.HasOne("SimplCommerce.Module.News.Models.NewsCategory", "Category")
                        .WithMany("NewsItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimplCommerce.Module.News.Models.NewsItem", "NewsItem")
                        .WithMany("Categories")
                        .HasForeignKey("NewsItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimplCommerce.Module.Orders.Models.Order", b =>
                {
                    b.HasOne("SimplCommerce.Module.Orders.Models.OrderAddress", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "LatestUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LatestUpdatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Orders.Models.Order", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Orders.Models.OrderAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Orders.Models.OrderAddress", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.StateOrProvince", "StateOrProvince")
                        .WithMany()
                        .HasForeignKey("StateOrProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Orders.Models.OrderHistory", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Orders.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Orders.Models.OrderItem", b =>
                {
                    b.HasOne("SimplCommerce.Module.Orders.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Payments.Models.Payment", b =>
                {
                    b.HasOne("SimplCommerce.Module.Orders.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.CartRuleCategory", b =>
                {
                    b.HasOne("SimplCommerce.Module.Pricing.Models.CartRule", "CartRule")
                        .WithMany("Categories")
                        .HasForeignKey("CartRuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimplCommerce.Module.Catalog.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.CartRuleCustomerGroup", b =>
                {
                    b.HasOne("SimplCommerce.Module.Pricing.Models.CartRule", "CartRule")
                        .WithMany("CustomerGroups")
                        .HasForeignKey("CartRuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimplCommerce.Module.Core.Models.CustomerGroup", "CustomerGroup")
                        .WithMany()
                        .HasForeignKey("CustomerGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.CartRuleProduct", b =>
                {
                    b.HasOne("SimplCommerce.Module.Pricing.Models.CartRule", "CartRule")
                        .WithMany("Products")
                        .HasForeignKey("CartRuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.CartRuleUsage", b =>
                {
                    b.HasOne("SimplCommerce.Module.Pricing.Models.CartRule", "CartRule")
                        .WithMany()
                        .HasForeignKey("CartRuleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Pricing.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.CatalogRuleCustomerGroup", b =>
                {
                    b.HasOne("SimplCommerce.Module.Pricing.Models.CatalogRule", "CatalogRule")
                        .WithMany("CustomerGroups")
                        .HasForeignKey("CatalogRuleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.CustomerGroup", "CustomerGroup")
                        .WithMany()
                        .HasForeignKey("CustomerGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Pricing.Models.Coupon", b =>
                {
                    b.HasOne("SimplCommerce.Module.Pricing.Models.CartRule", "CartRule")
                        .WithMany("Coupons")
                        .HasForeignKey("CartRuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SimplCommerce.Module.ProductComparison.Models.ComparingProduct", b =>
                {
                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Reviews.Models.Reply", b =>
                {
                    b.HasOne("SimplCommerce.Module.Reviews.Models.Review", "Review")
                        .WithMany("Replies")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Reviews.Models.Review", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Shipments.Models.Shipment", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Orders.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Inventory.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Shipments.Models.ShipmentItem", b =>
                {
                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Shipments.Models.Shipment", "Shipment")
                        .WithMany("Items")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.ShippingTableRate.Models.PriceAndDestination", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.StateOrProvince", "StateOrProvince")
                        .WithMany()
                        .HasForeignKey("StateOrProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.ShoppingCart.Models.Cart", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.ShoppingCart.Models.CartItem", b =>
                {
                    b.HasOne("SimplCommerce.Module.ShoppingCart.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.Tax.Models.TaxRate", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Core.Models.StateOrProvince", "StateOrProvince")
                        .WithMany()
                        .HasForeignKey("StateOrProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.Tax.Models.TaxClass", "TaxClass")
                        .WithMany()
                        .HasForeignKey("TaxClassId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.WishList.Models.WishList", b =>
                {
                    b.HasOne("SimplCommerce.Module.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SimplCommerce.Module.WishList.Models.WishListItem", b =>
                {
                    b.HasOne("SimplCommerce.Module.Catalog.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SimplCommerce.Module.WishList.Models.WishList", "WishList")
                        .WithMany("Items")
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
